import app.cash.paparazzi.gradle.PaparazziPlugin

buildscript {
    ext {
        application_id = 'com.android.dev.engineer.kotlin.compose'
        version_name = "1.0"
    }

    dependencies {
        classpath "com.willian.gama.gradle:plugin:1.0.0"
    }
}

plugins {
    alias libs.plugins.android.application apply false
    alias libs.plugins.android.library apply false
    alias libs.plugins.kotlin apply false
    alias libs.plugins.ksp apply false
    alias libs.plugins.paparazzi apply false
    alias libs.plugins.hilt apply false
    id 'jacoco' // Jacoco plugin: https://docs.gradle.org/current/userguide/jacoco_plugin.html#sec:jacoco_getting_started
}

apply plugin: 'com.willian.gama.plugin.gradle.code-analysis'

def localProperties = new Properties()
localProperties.load(project.rootProject.file("local.properties").newDataInputStream())

subprojects {
    apply plugin: 'jacoco'

    afterEvaluate {
        if (project.hasProperty('android')) {
            android {
                compileSdk 34

                defaultConfig {
                    minSdk 23
                    targetSdk 34
                }

                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_17
                    targetCompatibility JavaVersion.VERSION_17
                }

                kotlinOptions {
                    jvmTarget = JavaVersion.VERSION_17
                }

                testOptions {
                    reportDir "${project.layout.buildDirectory.get()}/reports/coverage/androidTest/debug/connected" // It's required for Sonar

                    buildTypes {
                        // Jacoco config: It configures/enables createDebugCoverageReport task to be used in generateCodeCoverage task below
                        debug {
                            testCoverageEnabled = true
                        }
                    }
                }

                // Jacoco - Generate reports: https://docs.gradle.org/current/userguide/jacoco_plugin.html#default_values_of_the_jacoco_task_extension
                tasks.register('generateCodeCoverage', JacocoReport) {
                    sourceDirectories.from = file("${project.projectDir}/src/main/java") // main source set
                    classDirectories.from = files(JacocoUtil.getKotlinFileTree(project)) // build directory
                    executionData.from = fileTree(dir: project.layout.buildDirectory.get(), includes: [
                            '**/*.exec', // unit tests
                            '**/*.ec' // ui tests
                    ])

                    // run unit tests and ui tests to generate code coverage report
                    reports {
                        html.required.set(true)
                        html.outputLocation.set(project.layout.buildDirectory.dir('reports/jacoco').get())
                        xml.required.set(true) // It's required for Sonar
                        xml.outputLocation.set(file("${project.layout.buildDirectory.get()}/reports/jacoco/jacoco.xml"))
                    }
                }

                // Jacoco - Verify violations: https://docs.gradle.org/current/userguide/jacoco_plugin.html#sec:jacoco_report_violation_rules
                tasks.register('verifyCodeCoverage', JacocoCoverageVerification) {
                    sourceDirectories.from = file("${project.projectDir}/src/main/java") // main source set
                    classDirectories.from = files(JacocoUtil.getKotlinFileTree(project))
                    executionData.from = fileTree(dir: project.layout.buildDirectory.get(), includes: [
                            '**/*.exec', // unit tests
                            '**/*.ec' // ui tests
                    ])

                    violationRules {
                        rule {
                            limit {
                                minimum = 0.3 // 30%
                            }
                        }
                    }
                }
            }
        }
    }

    // Jacoco version: https://docs.gradle.org/current/userguide/jacoco_plugin.html#sec:configuring_the_jacoco_plugin
    jacoco {
        toolVersion = libs.versions.jacoco.get()
    }

    // Jacoco test options: https://docs.gradle.org/current/userguide/jacoco_plugin.html#default_values_of_the_jacoco_task_extension
    tasks.withType(Test).configureEach {
        jacoco {
            includeNoLocationClasses = true // Robolectric support
            excludes = [
                    'jdk.internal.*', // Java compatibility
                    'coil.compose.*'
            ]
        }
    }

    // Paparazzi Google Guava compatibility
    plugins.withType(PaparazziPlugin).configureEach {
        dependencies.constraints {
            testImplementation("com.google.guava:guava") {
                attributes {
                    attribute(
                            TargetJvmEnvironment.TARGET_JVM_ENVIRONMENT_ATTRIBUTE,
                            objects.named(TargetJvmEnvironment, TargetJvmEnvironment.STANDARD_JVM)
                    )
                }
                because("LayoutLib and sdk-common depend on Guava's -jre published variant. See https://github.com/cashapp/paparazzi/issues/1231#issuecomment-1893104358.")
            }
        }
    }
}

// Gradle wrapper: https://docs.gradle.org/current/userguide/gradle_wrapper.html#customizing_wrapper
tasks.named('wrapper') {
    description = "Gradle wrapper task to update binary"
    gradleVersion = libs.versions.gradle.get()
    distributionType = Wrapper.DistributionType.BIN
}

class JacocoUtil {
    static ConfigurableFileTree getKotlinFileTree(Project project) {
        return project.fileTree(
                // Where generated Kotlin classes are located
                dir: "${project.layout.buildDirectory.get()}/tmp/kotlin-classes/debug",
                // Exclude everything that is not created by you, e.g. created by HILT
                excludes: [
                        '**/BuildConfig.*',
                        '**/*$*',
                        '**/Hilt_*.class',
                        'hilt_**',
                        'dagger/hilt/**',
                        '**/*JsonAdapter.*'
                ]
        )
    }
}